aaaaaaaaaaaaaaaa
bbbbbbbbbbbbbbbbbbb
ccccccccccccccccccccccc

//이걸 스테이징 하는 법 -> git add 파일이름
//전체 스테이징 하는 법 -> git add .
//이걸 커밋 하는 법 -> git commit -m '커밋했습니다1'

//파일 상태를 보고 싶다 -> git status
//파일의 기록을 보고 싶다 -> git log
//파일의 기록을 그래프 상태로 보고 싶다 -> git log --oneline --all --graph //여기서 (HEAD->???) 에서 ???는 현재 위치임임

//이 코드에 다른 기능을 추가하고 싶은데 바로 쓰기에는 뭔가뭔가 할 때 -> git branch 브랜치 이름 //이러면 브랜치 이름을 한 사본이 만들어짐
//방금 만든 브랜치로 이동하고 싶을 때 -> git switch 브랜치 이름

//브랜치에서 뭐 만들다가 메인 파일로 넘어가고 싶을 때 -> git switch main (or master)
//사실 브랜치가 뭐 사본의 의미만 가지고 있는 것은 아님 지금까지 메인으로 작업하는 파일도 명칭은 메인 브런치임 아님 마스터 브런치거나 아아 브랜치

//만약 브랜치에서 만든 코드가 개쩔었다고 생각하면 메인 브랜치랑 합칠 수 있음 
  -> 만약 지금 위치가 브랜치라면 git switch main 해주고 메인 브랜치로 넘어가서 git merge 브랜치이름 해주면 합치기 가능
  !-> 만약 메인 브랜치와 서브 브랜치에서 같은 파일, 같은 줄을 수정하고 합치면 merge conflict가 발생함
      이러면 어떤 걸 선택할 거냐고 물어보는데, 선택할 걸 정한다음 스테이징이랑 커밋해주면 문제를 해결해줌과 동시에 새로운 커밋을 만들어줌

//브랜치의 존재의의는 팀프로젝트 할 때 서로 다른 부분의 코드를 팀원들이 각자 짜고 합쳐볼 때 의미가 큼