day 05-08

1. 3-way merge -> 가장 통상적인 머지 방식임 기존의 메인 브랜치는 브랜치대로 작성하고
                  서브 브랜치는 서브 브랜치대로 작성한 다음 후에 합칠 때 
                  메인 브랜치쪽에 새로운 브랜치를 형성하고 메인, 서브 브랜치를 합치는 방식
                  
2. fast-forword merge -> 기존에 쓰던 메인 브랜치 작성은 멈춰두고 새로운 서브 브랜치에서만 
                         작업을 이어나갔을 때 메인과 서브를 합칠 때 이용
                         걍 작성하고 있던 서브 브랜치를 "이제부터 니 이름은 메인 브랜치여" 하는 것
                         만약 이런 방식이 싫은 홍대병충이라면 git merge --no-ff 브랜치명 해서 
                         강제로 3-way merge 가능

3. git branch -d or -D 브랜치이름 -> 위의 어떤 방식으로 머지를 하던 서브 브랜치가 사라지지는 않음 그러니
                                    공간 잡아먹는 브랜치를 삭제하고 싶다 그러면 이 명령어를 터미널에 입력하면 됨
                                    -d는 병합이 완료된 브랜치를 삭제하고 싶으면 ㄱ, -D는 병합안할 생각인 브랜치를 삭제하고 싶을 때 ㄱ

4. rebase and merge ->  일단 rebase가 뭐냐면 브랜치의 시작점을 다른 커밋으로 옮겨주는 작업임
                        4-1. rebase를 이용해서 신규브랜치의 시작점을 main 브랜치 최근 commit으로 옮긴 다음 
                        4-2. fast-forward merge하는 것
                        걍 강제 fast-forward merge라고 보면 됨
                        단점은 말그대로 강제로 다른 열의 일들을 행으로 옮기는거라 conflict가 발생할 수도 있다는 점

5. squash & merge -> 나중에 작업한 커밋들을 git log --oneline --all --graph로 나타낼 때 모든 커밋들을 3-way merge로 했다간 ㅈ될 수도 있음
                     ㅈㄴ 복잡해지기 때문 그래서 사용하는게 squash & merge임 이건 이전 커밋 기록을 나타내지 않고 서브 브랜치를 모두 합쳐 하나의 커밋으로 만들고 메인 브랜치에 순간이동 시켜버리는 방식ㄷ
                     하는 방법은 git switch main -> git merge --squash 브랜치명 -> git commit -m '할 말'                     